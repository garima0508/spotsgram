{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","src","width","height","allowfullscreen","loading","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","inverse","danger","LoadingSpinner","asOverlay","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","map","place","key","creator","coordinates","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","useEffect","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"qGAAA,0BAYeA,IARF,SAACC,GACZ,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,+NCWEC,G,MAdH,SAACJ,GACX,OACE,yBAAKC,UAAS,cAASD,EAAMC,WAAaC,MAAOF,EAAME,OACrD,4BACEG,IAAI,yRACJC,MAAM,OACNC,OAAO,OAEPC,gBAAgB,GAChBC,QAAQ,Y,wBC0FDC,EA3FG,SAACV,GACjB,MAAsDW,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACjCC,EAAOC,qBAAWC,KACxB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAEMC,EAAkB,kBAAMH,GAAW,IAEnCI,EAAsB,kBAAMF,GAAoB,IAEhDG,EAAoB,uCAAG,sBAAAC,EAAA,6DAC3BJ,GAAoB,GADO,kBAGnBT,EAAY,GAAD,OACZc,sCADY,mBACgC5B,EAAM6B,IACrD,SACA,KACA,CAAEC,cAAe,UAAYd,EAAKe,QAPX,OASzB/B,EAAMgC,SAAShC,EAAM6B,IATI,uGAAH,qDAY1B,OACE,oCACE,kBAACI,EAAA,EAAD,CAAYpB,MAAOA,EAAOqB,QAASnB,IACnC,kBAACoB,EAAA,EAAD,CACEC,KAAMhB,EACNiB,SAAUb,EACVc,OAAQtC,EAAMuC,QACdC,aAAa,4BACbC,YAAY,4BACZC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAASpB,GAAjB,UAER,yBAAKvB,UAAU,iBAEb,kBAAC,EAAD,QAGJ,kBAACkC,EAAA,EAAD,CACEC,KAAMd,EACNe,SAAUZ,EACVa,OAAO,gBACPG,YAAY,4BACZC,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQE,SAAO,EAACD,QAASnB,GAAzB,UAGA,kBAACkB,EAAA,EAAD,CAAQG,QAAM,EAACF,QAASlB,GAAxB,YAMJ,6HAKF,wBAAIzB,UAAU,cACZ,kBAACF,EAAA,EAAD,CAAME,UAAU,uBACbW,GAAa,kBAACmC,EAAA,EAAD,CAAgBC,WAAS,IACvC,yBAAK/C,UAAU,qBACb,yBACEI,IAAG,UAAKuB,kCAAL,YAAwC5B,EAAMiD,OACjDC,IAAKlD,EAAMmD,SAGf,yBAAKlD,UAAU,oBACb,4BAAKD,EAAMmD,OACX,4BAAKnD,EAAMuC,SACX,2BAAIvC,EAAMoD,cAEZ,yBAAKnD,UAAU,uBACb,kBAAC0C,EAAA,EAAD,CAAQC,QArEK,kBAAMvB,GAAW,IAqEGwB,SAAO,GAAxC,eAGC7B,EAAKqC,SAAWrD,EAAMsD,WACrB,kBAACX,EAAA,EAAD,CAAQY,GAAE,kBAAavD,EAAM6B,KAA7B,QAEDb,EAAKqC,SAAWrD,EAAMsD,WACrB,kBAACX,EAAA,EAAD,CAAQG,QAAM,EAACF,QA1EM,kBAAMrB,GAAoB,KA0E/C,eCzDCiC,G,MA7BG,SAACxD,GACjB,OAA2B,IAAvBA,EAAMyD,MAAMC,OAEZ,yBAAKzD,UAAU,qBACb,kBAACF,EAAA,EAAD,KACE,kEACA,kBAAC4C,EAAA,EAAD,CAAQY,GAAG,eAAX,iBAMN,wBAAItD,UAAU,cACXD,EAAMyD,MAAME,KAAI,SAACC,GAAD,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAM/B,GACXA,GAAI+B,EAAM/B,GACVoB,MAAOW,EAAMX,MACbE,MAAOS,EAAMT,MACbC,YAAaQ,EAAMR,YACnBb,QAASqB,EAAMrB,QACfe,UAAWM,EAAME,QACjBC,YAAaH,EAAMI,SACnBhC,SAAUhC,EAAMiE,sBCgBXC,UAtCI,WACjB,MAAwC/C,qBAAxC,mBAAOgD,EAAP,KAAqBC,EAArB,KACA,EAAsDzD,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEjCsC,EAASgB,cAAYhB,OAE3BiB,qBAAU,YACS,uCAAG,4BAAA3C,EAAA,+EAEWb,EAAY,GAAD,OACjCc,sCADiC,wBACgByB,IAHtC,OAEVkB,EAFU,OAKhBH,EAAgBG,EAAaC,QALb,uGAAH,qDAQjBC,KACC,CAAC3D,EAAauC,IAQjB,OACE,oCACE,kBAACpB,EAAA,EAAD,CAAYpB,MAAOA,EAAOqB,QAASnB,IAClCH,GACC,yBAAKX,UAAU,UACb,kBAAC8C,EAAA,EAAD,QAGFnC,GAAauD,GACb,kBAAC,EAAD,CAAWV,MAAOU,EAAcF,cAfV,SAACS,GAC3BN,GAAgB,SAACO,GAAD,OACdA,EAAWC,QAAO,SAAChB,GAAD,OAAWA,EAAM/B,KAAO6C","file":"static/js/7.71d5d0c1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport \"./Map.css\";\r\n\r\nconst Map = (props) => {\r\n  return (\r\n    <div className={`map ${props.className}`} style={props.style}>\r\n      <iframe\r\n        src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3022.617356072671!2d-73.98785308526995!3d40.74844454332329!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c259a9b3117469%3A0xd134e199a405a163!2sEmpire%20State%20Building!5e0!3m2!1sen!2sin!4v1622479495858!5m2!1sen!2sin\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        // style=\"border:0;\"\r\n        allowfullscreen=\"\"\r\n        loading=\"lazy\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n};\r\nexport default Map;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Map from \"../../shared/components/UIElements/Map\";\r\nimport \"./PlaceItem.css\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst PlaceItem = (props) => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n  const openMapHandler = () => setShowMap(true);\r\n  const closeMapHandler = () => setShowMap(false);\r\n  const showDeleteWarningHandler = () => setShowConfirmModal(true);\r\n  const cancelDeleteHandler = () => setShowConfirmModal(false);\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`,\r\n        \"DELETE\",\r\n        null,\r\n        { Authorization: \"Bearer \" + auth.token }\r\n      );\r\n      props.onDelete(props.id);\r\n    } catch (err) {}\r\n  };\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Modal\r\n        show={showMap}\r\n        onCancel={closeMapHandler}\r\n        header={props.address}\r\n        contentClass=\"place-item__modal-content\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\r\n      >\r\n        <div className=\"map-container\">\r\n          {/* <h2>THE MAP</h2> */}\r\n          <Map />\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header=\"Are you sure?\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={\r\n          <>\r\n            <Button inverse onClick={cancelDeleteHandler}>\r\n              CANCEL\r\n            </Button>\r\n            <Button danger onClick={confirmDeleteHandler}>\r\n              DELETE\r\n            </Button>\r\n          </>\r\n        }\r\n      >\r\n        <p>\r\n          Do you want to proceed and delete this place? Please note that it\r\n          can't be undone thereafter.\r\n        </p>\r\n      </Modal>\r\n      <li className=\"place-item\">\r\n        <Card className=\"place-item__content\">\r\n          {isLoading && <LoadingSpinner asOverlay />}\r\n          <div className=\"place-item__image\">\r\n            <img\r\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\r\n              alt={props.title}\r\n            />\r\n          </div>\r\n          <div className=\"place-item__info\">\r\n            <h2>{props.title}</h2>\r\n            <h3>{props.address}</h3>\r\n            <p>{props.description}</p>\r\n          </div>\r\n          <div className=\"place-item__actions\">\r\n            <Button onClick={openMapHandler} inverse>\r\n              VIEW ON MAP\r\n            </Button>\r\n            {auth.userId === props.creatorId && (\r\n              <Button to={`/places/${props.id}`}>EDIT</Button>\r\n            )}\r\n            {auth.userId === props.creatorId && (\r\n              <Button danger onClick={showDeleteWarningHandler}>\r\n                DELETE\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\nexport default PlaceItem;\r\n","import React from \"react\";\r\n\r\nimport PlaceItem from \"./PlaceItem\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport \"./PlaceList.css\";\r\n\r\nconst PlaceList = (props) => {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"place-list center\">\r\n        <Card>\r\n          <h2>No places found. Maybe create one?</h2>\r\n          <Button to=\"/places/new\">Share Place</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <ul className=\"place-list\">\r\n      {props.items.map((place) => (\r\n        <PlaceItem\r\n          key={place.id}\r\n          id={place.id}\r\n          image={place.image}\r\n          title={place.title}\r\n          description={place.description}\r\n          address={place.address}\r\n          creatorId={place.creator}\r\n          coordinates={place.location}\r\n          onDelete={props.onDeletePlace}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default PlaceList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport PlaceList from \"../components/PlaceList\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst UserPlaces = () => {\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\r\n        );\r\n        setLoadedPlaces(responseData.places);\r\n      } catch (err) {}\r\n    };\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]);\r\n\r\n  const placeDeletedHandler = (deletedPlaceId) => {\r\n    setLoadedPlaces((prevPlaces) =>\r\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlaces && (\r\n        <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default UserPlaces;\r\n"],"sourceRoot":""}